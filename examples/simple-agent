#!/usr/bin/env lem
--
-- This file is part of lem-dbus
-- Copyright 2011 Emil Renner Berthing
--
-- lem-dbus is free software: you can redistribute it and/or
-- modify it under the terms of the GNU General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- lem-dbus is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with lem-dbus. If not, see <http://www.gnu.org/licenses/>.
--
--[[

This is a copy of the simple-agent python script in the Bluez sources.

Last tested with Bluez 4.87

--]]

-- Import module
local dbus = require 'lem.dbus'

-- Get the system bus
local bus = assert(dbus.system())

-- Create the agent exported object
local agentpath = '/test/agent'
local agent = dbus.newobject(agentpath)
agent.exit_on_release = true

agent:addmethod('org.bluez.Agent', 'Release', '', '',
function()
   if agent.exit_on_release then
      bus:close()
   end
end)

agent:addmethod('org.bluez.Agent', 'Authorize', 'os', '',
function(device, uuid)
   print(('Authorize (%s, %s)'):format(device, uuid))
end)

agent:addmethod('org.bluez.Agent', 'RequestPinCode', 'o', 's',
function(device)
   print(('RequestPinCode (%s)'):format(device))
   io.write 'Enter PIN Code: '
   return 's', io.read()
end)

agent:addmethod('org.bluez.Agent', 'RequestPasskey', 'o', 'u',
function(device)
   print(('RequestPasskey (%s)'):format(device))
   while true do
      io.write 'Enter passkey: '
      local passkey = tonumber(io.read())
      if passkey and passkey >= 0 then return 'u', passkey end
      print 'A non-negative integer is needed..'
   end
end)

agent:addmethod('org.bluez.Agent', 'DisplayPasskey', 'ou', '',
function(device, passkey)
   print(('DisplayPasskey (%s, %d)'):format(device, passkey))
end)

do
   local Rejected = dbus.newerror('org.bluez.Error.Rejected')

   agent:addmethod('org.bluez.Agent', 'RequestConfirmation', 'ou', '',
   function(device, passkey)
      print(('RequestConfirmation (%s, %d)'):format(device, passkey))
      io.write 'Confirm passkey (yes/no): '
      local confirm = io.read()
      if confirm == 'yes' then
         return
      end

      return Rejected("Passkey doesn't match")
   end)
end

agent:addmethod('org.bluez.Agent', 'ConfirmModeChange', 's', '',
function(mode)
   print(('ConfirmModeChange (%s)'):format(mode))
end)

agent:addmethod('org.bluez.Agent', 'Cancel', '', '',
function()
   print 'Cancel'
end)

-- Register the agent object
assert(bus:registerobject(agent))

-- Get the adapter proxy object
local adapter
do
   local manager = assert(bus:autoproxy('org.bluez', '/'))
   local path

   if #arg >= 1 then
      path = assert(manager:FindAdapter(arg[1]))
   else
      path = assert(manager:DefaultAdapter())
   end

   adapter = assert(bus:autoproxy('org.bluez', path))
end

-- If both the adapter and address is given at the command line
-- call CreatePairedDevice()
-- Otherwise just register our agent with Bluez
if #arg >= 2 then
   -- If a third argument is given remove the device first
   if #arg >= 3 then
      local device, err = adapter:FindDevice(arg[2])
      if err then
         if err == 'Device does not exist' then
            print(err)
         else
            error(err)
         end
      else
         local _, err = adapter:RemoveDevice(device)
         if err then error(err) end
      end
   end

   agent.exit_on_release = false

   local device, err = adapter:CreatePairedDevice(arg[2], agentpath, 'DisplayYesNo')
   if device then
      print(('New device %s'):format(device))
   else
      print(('Creating device failed: %s'):format(err))
   end

   bus:close()
else
   local _, err = adapter:RegisterAgent(agentpath, 'DisplayYesNo')
   if err then error(err) end

   print 'Agent registered'
end

-- vim: syntax=lua ts=2 sw=2 noet:
