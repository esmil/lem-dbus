#!/usr/bin/env lem
--
-- This file is part of lem-dbus
-- Copyright 2011 Emil Renner Berthing
--
-- lem-dbus is free software: you can redistribute it and/or
-- modify it under the terms of the GNU General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- lem-dbus is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with lem-dbus. If not, see <http://www.gnu.org/licenses/>.
--
--[[

This script gets info from the bluetoothd daemon about the different bluetooth adapters,
and then make them all discover remote devices.

Last tested with bluez 4.87

--]]

-- Define some pretty printing functions
local printlist, printproperties
do
	local type, ipairs, write, format, sort =
		type, ipairs, io.write, string.format, table.sort

	function printlist(list, spacing)
		if not spacing then spacing = '' end

		for i = 1, #list do
			write(spacing, format('%4i: ', i), list[i], '\n')
		end
	end

	function printproperties(prop, spacing)
		if not spacing then spacing = '' end
		local keys, i, width = {}, 0, 0
		for k, _ in pairs(prop) do
			i = i+1
			keys[i] = k
			if #k > width then width = #k end
		end
		sort(keys)
		for _, k in ipairs(keys) do
			write(spacing, k, ': ')
			for i = 1, width - #k do
			write(' ')
		end
		local v = prop[k]
			if type(v) == 'table' then v = '...' end
			write(tostring(v), '\n')
		end
	end
end

-- Import module
local dbus = require 'lem.dbus'

-- Get the system bus
local bus = assert(dbus.system())

-- Make a new proxy object for the / object connected at org.bluez
local bluez = bus:newproxy('org.bluez', '/')

-- Add methods manually
bluez:addmethod('org.bluez.Manager', 'ListAdapters')
bluez:addmethod('org.bluez.Manager', 'DefaultAdapter')

-- Get a list of the adapters and print it
local adapters, msg = bluez:ListAdapters()
if not adapters then
	print('Couldn\'t get adapters: '..msg)
	os.exit(1)
end
if #adapters == 0 then
	print 'No adapters found'
	os.exit(0)
end
print('Adapters:')
printlist(adapters)

-- Show the default adapter too
print('\nDefault: '..assert(bluez:DefaultAdapter()))

-- Now go through the adapters, create proxies for each of them
-- and dump lots of information
for i, objpath in ipairs(adapters) do
	-- This time we use the autoproxy() method to
	-- parse the introspection xml and create the
	-- proxy for us
	local a = assert(bus:autoproxy('org.bluez', objpath))
	adapters[i] = a

	print('\n'..objpath..':')

	local info = assert(a:GetProperties())
	printproperties(info, '   ')

	local devices = info.Devices
	if devices then
		for _, objpath in ipairs(devices) do
			print('\n   '..objpath..':')

			-- This time we don't even create a proxy object,
			-- but just use call() directly
			local info = assert(bus:call(
				'org.bluez',         -- target
				objpath,             -- object path
				'org.bluez.Device',  -- interface
				'GetProperties'))    -- method name
				-- '',               -- signature (defaults to '')
				-- ...))             -- arguments

			printproperties(info, '      ')
		end
	end
end

-- Define signal handlers

local discovering = 0

local function DeviceFoundFunc(id)
	return function(address, prop)
		print(id..': Found device')
		printproperties(prop, '   ')
	end
end

local function PropertyChangedFunc(id, adapter)
	return function(name, value)
		print(id..': Property changed')
		print('   '..name..' -> '..tostring(value))
		if name == 'Discovering' then
			if value then
				discovering = discovering + 1
			else
				adapter:StopDiscovery()
				discovering = discovering - 1
				if discovering == 0 then
					print('Success!')
					bus:close()
				end
			end
		end
	end
end

-- Register signal handlers

for _, a in ipairs(adapters) do
	local id = a.object:gsub('.*/(.*)', '%1')

	--[[ You can register for signals like this
	assert(bus:registersignal(a.object,
		'org.bluez.Adapter',
		'DeviceFound',
		DeviceFoundFunc(id)))
	--]]
	--![[ ..but since autoproxy() already found
	--    much of this information we can just do
	assert(bus:registersignal(a.DeviceFound, DeviceFoundFunc(id)))
	--]]

	assert(bus:registersignal(a.PropertyChanged, PropertyChangedFunc(id, a)))
end

-- Start discovery on all adapters

print '\nStarting discovery on all adapters:'
for _, a in ipairs(adapters) do
	a:StartDiscovery()
end

-- vim: syntax=lua ts=2 sw=2 noet:
